Parameters:
  ProjectName:
    Type: String
Resources:
  TASKROLEA2089027:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonS3FullAccess
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonECS_FullAccess
    Metadata:
      aws:cdk:path: DeploymentStack/TASKROLE/Resource
  DBSECRETE6F61AC6:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        ExcludePunctuation: true
        PasswordLength: 20
      Name: dbPassword
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: DeploymentStack/DBSECRET/Resource
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/Resource
  VPCPublicSubnet1SubnetB4246D30:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: DeploymentStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet1/Subnet
  VPCPublicSubnet1RouteTableFEE4B781:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet1/RouteTable
  VPCPublicSubnet1RouteTableAssociation0B0896DC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet1/RouteTableAssociation
  VPCPublicSubnet1DefaultRoute91CEF279:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet1/DefaultRoute
  VPCPublicSubnet1EIP6AD938E8:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet1/EIP
  VPCPublicSubnet1NATGatewayE0556630:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
      AllocationId:
        Fn::GetAtt:
          - VPCPublicSubnet1EIP6AD938E8
          - AllocationId
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet1/NATGateway
  VPCPublicSubnet2Subnet74179F39:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.16/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: DeploymentStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet2/Subnet
  VPCPublicSubnet2RouteTable6F1A15F1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC/PublicSubnet2
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet2/RouteTable
  VPCPublicSubnet2RouteTableAssociation5A808732:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      SubnetId:
        Ref: VPCPublicSubnet2Subnet74179F39
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet2/RouteTableAssociation
  VPCPublicSubnet2DefaultRouteB7481BBA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PublicSubnet2/DefaultRoute
  VPCPrivateSubnet1Subnet8BCA10E0:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.32/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: DeploymentStack/VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PrivateSubnet1/Subnet
  VPCPrivateSubnet1RouteTableBE8A6027:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC/PrivateSubnet1
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PrivateSubnet1/RouteTable
  VPCPrivateSubnet1RouteTableAssociation347902D1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
      SubnetId:
        Ref: VPCPrivateSubnet1Subnet8BCA10E0
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PrivateSubnet1/RouteTableAssociation
  VPCPrivateSubnet1DefaultRouteAE1D6490:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet1NATGatewayE0556630
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PrivateSubnet1/DefaultRoute
  VPCPrivateSubnet2SubnetCFCDAA7A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.48/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: DeploymentStack/VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PrivateSubnet2/Subnet
  VPCPrivateSubnet2RouteTable0A19E10E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC/PrivateSubnet2
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PrivateSubnet2/RouteTable
  VPCPrivateSubnet2RouteTableAssociation0C73D413:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
      SubnetId:
        Ref: VPCPrivateSubnet2SubnetCFCDAA7A
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PrivateSubnet2/RouteTableAssociation
  VPCPrivateSubnet2DefaultRouteF4F5CFD2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet1NATGatewayE0556630
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/PrivateSubnet2/DefaultRoute
  VPCDBSubnet1Subnet5E0CF118:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.64/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: DB
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: DeploymentStack/VPC/DBSubnet1
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/DBSubnet1/Subnet
  VPCDBSubnet1RouteTableD25F5A48:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC/DBSubnet1
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/DBSubnet1/RouteTable
  VPCDBSubnet1RouteTableAssociationDC8481F9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCDBSubnet1RouteTableD25F5A48
      SubnetId:
        Ref: VPCDBSubnet1Subnet5E0CF118
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/DBSubnet1/RouteTableAssociation
  VPCDBSubnet2SubnetDABA49CF:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.80/28
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: DB
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: DeploymentStack/VPC/DBSubnet2
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/DBSubnet2/Subnet
  VPCDBSubnet2RouteTable51E969F8:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC/DBSubnet2
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/DBSubnet2/RouteTable
  VPCDBSubnet2RouteTableAssociationF6FBF57B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCDBSubnet2RouteTable51E969F8
      SubnetId:
        Ref: VPCDBSubnet2SubnetDABA49CF
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/DBSubnet2/RouteTableAssociation
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: DeploymentStack/VPC
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/VPCGW
  VPCS3Endpoint18C9C7CA:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .s3
      VpcId:
        Ref: VPCB9E5F0B4
      RouteTableIds:
        - Ref: VPCPrivateSubnet1RouteTableBE8A6027
        - Ref: VPCPrivateSubnet2RouteTable0A19E10E
        - Ref: VPCPublicSubnet1RouteTableFEE4B781
        - Ref: VPCPublicSubnet2RouteTable6F1A15F1
        - Ref: VPCDBSubnet1RouteTableD25F5A48
        - Ref: VPCDBSubnet2RouteTable51E969F8
      VpcEndpointType: Gateway
    Metadata:
      aws:cdk:path: DeploymentStack/VPC/S3Endpoint/Resource
  ARTIFACTBUCKET3AC4D6FF:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - ""
          - - Ref: ProjectName
            - -artifacts-
            - Ref: AWS::AccountId
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: DeploymentStack/ARTIFACTBUCKET/Resource
  SGRDS8D02E925:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DeploymentStack/SGRDS
      GroupName: sg_rds
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: DeploymentStack/SGRDS/Resource
  SGRDSfromDeploymentStackMLFLOWSecurityGroup05D48971IndirectPort8D561724:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: allow from MLFlow Container
      FromPort:
        Fn::GetAtt:
          - MYSQLDA998D0F
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - SGRDS8D02E925
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MLFLOWSecurityGroup455A4042
          - GroupId
      ToPort:
        Fn::GetAtt:
          - MYSQLDA998D0F
          - Endpoint.Port
    Metadata:
      aws:cdk:path: DeploymentStack/SGRDS/from DeploymentStackMLFLOWSecurityGroup05D48971:{IndirectPort}
  MYSQLSubnetGroup5B5FBC17:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for MYSQL database
      SubnetIds:
        - Ref: VPCDBSubnet1Subnet5E0CF118
        - Ref: VPCDBSubnet2SubnetDABA49CF
    Metadata:
      aws:cdk:path: DeploymentStack/MYSQL/SubnetGroup/Default
  MYSQLDA998D0F:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t2.small
      AllocatedStorage: "100"
      CopyTagsToSnapshot: true
      DBName: mlflowdb
      DBSubnetGroupName:
        Ref: MYSQLSubnetGroup5B5FBC17
      DeletionProtection: false
      Engine: mysql
      EngineVersion: 8.0.19
      MasterUsername: master
      MasterUserPassword:
        Fn::Join:
          - ""
          - - "{{resolve:secretsmanager:"
            - Ref: DBSECRETE6F61AC6
            - :SecretString:::}}
      Port: "3306"
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups:
        - Fn::GetAtt:
            - SGRDS8D02E925
            - GroupId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: DeploymentStack/MYSQL/Resource
  CLUSTERCDDEBBE4:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: mlflow
    Metadata:
      aws:cdk:path: DeploymentStack/CLUSTER/Resource
  MLflowDDA9BA68:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: BUCKET
              Value:
                Fn::Join:
                  - ""
                  - - s3://
                    - Ref: ARTIFACTBUCKET3AC4D6FF
            - Name: HOST
              Value:
                Fn::GetAtt:
                  - MYSQLDA998D0F
                  - Endpoint.Address
            - Name: PORT
              Value: "3306"
            - Name: DATABASE
              Value: mlflowdb
            - Name: USERNAME
              Value: master
          Essential: true
          Image:
            Fn::Join:
              - ""
              - - Ref: AWS::AccountId
                - .dkr.ecr.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /aws-cdk/assets:21ec7c6c61a33ba43476f9440fcfd579786957782aa5d156053c705d8b9bde9f
          Name: Container
          PortMappings:
            - ContainerPort: 5000
              HostPort: 5000
              Protocol: tcp
          Secrets:
            - Name: PASSWORD
              ValueFrom:
                Ref: DBSECRETE6F61AC6
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - MLflowExecutionRoleB8ECF96D
          - Arn
      Family: DeploymentStackMLflow75B51616
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - TASKROLEA2089027
          - Arn
    Metadata:
      aws:cdk:path: DeploymentStack/MLflow/Resource
  MLflowExecutionRoleB8ECF96D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: DeploymentStack/MLflow/ExecutionRole/Resource
  MLflowExecutionRoleDefaultPolicy23CB19EA:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/aws-cdk/assets
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Effect: Allow
            Resource:
              Ref: DBSECRETE6F61AC6
        Version: "2012-10-17"
      PolicyName: MLflowExecutionRoleDefaultPolicy23CB19EA
      Roles:
        - Ref: MLflowExecutionRoleB8ECF96D
    Metadata:
      aws:cdk:path: DeploymentStack/MLflow/ExecutionRole/DefaultPolicy/Resource
  Certificate4E7ABB08:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: mlflow.example.com
      DomainValidationOptions:
        - DomainName: mlflow.example.com
          HostedZoneId: Z1234ABCD5EFGH
      ValidationMethod: DNS
    Metadata:
      aws:cdk:path: DeploymentStack/Certificate/Resource
  LB8A12904C:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - LBSecurityGroup8A41EA2B
            - GroupId
      Subnets:
        - Ref: VPCPublicSubnet1SubnetB4246D30
        - Ref: VPCPublicSubnet2Subnet74179F39
      Type: application
    DependsOn:
      - VPCPublicSubnet1DefaultRoute91CEF279
      - VPCPublicSubnet2DefaultRouteB7481BBA
    Metadata:
      aws:cdk:path: DeploymentStack/LB/Resource
  LBSecurityGroup8A41EA2B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB DeploymentStackLBA8503F56
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: allow ALB to verify token
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: DeploymentStack/LB/SecurityGroup/Resource
  LBSecurityGrouptoDeploymentStackMLFLOWSecurityGroup05D4897150003F772BD9:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - LBSecurityGroup8A41EA2B
          - GroupId
      IpProtocol: tcp
      Description: allow from LB
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - MLFLOWSecurityGroup455A4042
          - GroupId
      FromPort: 5000
      ToPort: 5000
    Metadata:
      aws:cdk:path: DeploymentStack/LB/SecurityGroup/to DeploymentStackMLFLOWSecurityGroup05D48971:5000
  LBRedirect80To443B713AAEC:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Port: "443"
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn:
        Ref: LB8A12904C
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: DeploymentStack/LB/Redirect80To443/Resource
  LBListener49E825B4:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - AuthenticateOidcConfig:
            AuthorizationEndpoint: https://dev-12345678.okta.com/oauth2/default/v1/authorize
            ClientId: a1b2c3d4e5f6g7h8i9j0k
            ClientSecret: "{{resolve:secretsmanager:okta_client_secret:SecretString:::}}"
            Issuer: https://dev-12345678.okta.com/oauth2/default
            Scope: openid profile
            SessionTimeout: "300"
            TokenEndpoint: https://dev-12345678.okta.com/oauth2/default/v1/token
            UserInfoEndpoint: https://dev-12345678.okta.com/oauth2/default/v1/userinfo
          Order: 1
          Type: authenticate-oidc
        - Order: 2
          TargetGroupArn:
            Ref: TGB29B09E7
          Type: forward
      LoadBalancerArn:
        Ref: LB8A12904C
      Certificates:
        - CertificateArn:
            Ref: Certificate4E7ABB08
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
    Metadata:
      aws:cdk:path: DeploymentStack/LB/Listener/Resource
  TGB29B09E7:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: DeploymentStack/TG/Resource
  AliasRecord851000D2:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: mlflow.example.com.
      Type: A
      AliasTarget:
        DNSName:
          Fn::Join:
            - ""
            - - dualstack.
              - Fn::GetAtt:
                  - LB8A12904C
                  - DNSName
        HostedZoneId:
          Fn::GetAtt:
            - LB8A12904C
            - CanonicalHostedZoneID
      HostedZoneId: Z1234ABCD5EFGH
    Metadata:
      aws:cdk:path: DeploymentStack/AliasRecord/Resource
  MLFLOWService27D49D14:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: CLUSTERCDDEBBE4
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: Container
          ContainerPort: 5000
          TargetGroupArn:
            Ref: TGB29B09E7
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - MLFLOWSecurityGroup455A4042
                - GroupId
          Subnets:
            - Ref: VPCPrivateSubnet1Subnet8BCA10E0
            - Ref: VPCPrivateSubnet2SubnetCFCDAA7A
      ServiceName: mlflow
      TaskDefinition:
        Ref: MLflowDDA9BA68
    DependsOn:
      - LBListener49E825B4
    Metadata:
      aws:cdk:path: DeploymentStack/MLFLOW/Service
  MLFLOWSecurityGroup455A4042:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DeploymentStack/MLFLOW/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: VPCB9E5F0B4
    DependsOn:
      - LBListener49E825B4
    Metadata:
      aws:cdk:path: DeploymentStack/MLFLOW/SecurityGroup/Resource
  MLFLOWSecurityGroupfromDeploymentStackLBSecurityGroup88F2A6935000CE24C860:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: allow from LB
      FromPort: 5000
      GroupId:
        Fn::GetAtt:
          - MLFLOWSecurityGroup455A4042
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LBSecurityGroup8A41EA2B
          - GroupId
      ToPort: 5000
    DependsOn:
      - LBListener49E825B4
    Metadata:
      aws:cdk:path: DeploymentStack/MLFLOW/SecurityGroup/from DeploymentStackLBSecurityGroup88F2A693:5000
  MLFLOWTaskCountTarget343AC77E:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId:
        Fn::Join:
          - ""
          - - service/
            - Ref: CLUSTERCDDEBBE4
            - /
            - Fn::GetAtt:
                - MLFLOWService27D49D14
                - Name
      RoleARN:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":iam::"
            - Ref: AWS::AccountId
            - :role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - LBListener49E825B4
    Metadata:
      aws:cdk:path: DeploymentStack/MLFLOW/TaskCount/Target/Resource
  MLFLOWTaskCountTargetAUTOSCALING5268C4C7:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: DeploymentStackMLFLOWTaskCountTargetAUTOSCALINGC1EB4D2C
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: MLFLOWTaskCountTarget343AC77E
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 70
    DependsOn:
      - LBListener49E825B4
    Metadata:
      aws:cdk:path: DeploymentStack/MLFLOW/TaskCount/Target/AUTOSCALING/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31TTW/bMAz9Lb0r6rp0wHZb4qRFgGEw7KB3RmZSLbZk6CNFYPi/j5Ic21mBnUQ+PlHkI/XEn5bP/MvDT/iwC1GdHzuhDfKudCDOLDuqHAw06NCwAq32RiDLtLLOeOHYylp0RD1JdQrkiXJUxKqkk1r1LOTuJDS8K3Qdg/HMdS3FNT4SrZ5ZFAadbUDBCQ1VEf3ASFbPUHzl3VsrAvaWZyz3B7pa+oMaeKNVaO9wD4f0YMInjCrXQkKobyQHY7vLw/Eb3Cs4/IAry428kDkl3ilSg+wbIVUyeCtHwr03qBwbECp2q6pWS+UG6uhSU95Id3012rdDl/8Bdupk0NpP+DbCpN6Sd2svzqnMZPXMVJZ3G3BwAIs7mhwoGlBqZ3xns/4E3KhBc8qQ1d6GLQiTHcwXMCcIetrzBo9SyZua/yJaOZAKzQwb7pZoLjLty80sBdRhQiFJpr2KQzcLCKtm+UZTV2bX0H7E5QsxXmCrrXTaXNfUIxNonDxKQfnHTcomLLYwuZS+BuukqDVUB3pbCdrmC63Zqm3rQKF6f1FsHWNJgjt/zpOkjBo4N3sW31PbM5VnLg0q7OA3muGqQPqEVfpQwSrDHGHKAt5pSzJRnfRHRr1CrqjkPZKOvaEPTRfKdG/6e3dA3/csv7p3rR6X/Af//vDHSrkwNAXZIC/S+ReszRLaNAQAAA==
    Metadata:
      aws:cdk:path: DeploymentStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

